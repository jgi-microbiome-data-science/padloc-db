#!/usr/bin/env python

import argparse
import csv
import itertools
import math
from dataclasses import dataclass, field
from pathlib import Path
from typing import List

import networkx as nx
import yaml


@dataclass
class SystemData:
    core_genes: set
    optional_genes: set


@dataclass
class DetectedSystem:
    system_num: int
    total_score: int = 0
    genes: List[str] = field(default_factory=list)


parser = argparse.ArgumentParser(
    description="Process the output of a PADLOC execution to get the best scoring graph."
)
parser.add_argument(
    "sys_directory", type=Path, help="Path to the PADLOC system directory"
)
parser.add_argument("input", type=Path, help="CSV file generated by PADLOC")
parser.add_argument(
    "output",
    type=Path,
    help="CSV file containing the systems that form the best scoring graph",
)
args = parser.parse_args()

system_data_dict = {}
for f in args.sys_directory.glob("*.yaml"):
    with open(f) as fin:
        data = yaml.load(fin, Loader=yaml.CLoader)
        system = f.stem
        core_genes = set(data["core_genes"])
        optional_genes = set(data["optional_genes"])
        system_data_dict[system] = SystemData(core_genes, optional_genes)


detected_systems_dict = {}
with open(args.input) as fin:
    next(fin)
    reader = csv.reader(fin)
    for sys_num, _, system, gene, _, _, protein_name, _, dom_eval, *_ in reader:
        sys_num, dom_eval = int(sys_num), float(dom_eval)
        if dom_eval == 0:
            dom_eval = 1e-305
        score = -math.log10(dom_eval)
        if protein_name in system_data_dict[system].optional_genes:
            score /= 2
        if sys_num not in detected_systems_dict:
            detected_systems_dict[sys_num] = DetectedSystem(sys_num)
        detected_systems_dict[sys_num].total_score += score
        detected_systems_dict[sys_num].genes.append(gene)


G = nx.Graph()
G.add_nodes_from(detected_systems_dict)
for sys_i, sys_j in itertools.combinations(detected_systems_dict, 2):
    shared_genes = set(detected_systems_dict[sys_i].genes).intersection(
        detected_systems_dict[sys_j].genes
    )
    if not len(shared_genes):
        G.add_edge(sys_i, sys_j)


cliques = nx.algorithms.clique.find_cliques(G)
max_score = None
max_cliques = []
for c in cliques:
    current_score = sum(detected_systems_dict[s].total_score for s in c)
    if max_score is None or (current_score > max_score):
        max_score = current_score
        max_cliques = c
max_cliques = set(max_cliques)


with open(args.output, "w") as fout, open(args.input) as fin:
    fout.write(next(fin))
    for line in fin:
        sys_num = int(line.strip().split(",")[0])
        if sys_num in max_cliques:
            fout.write(line)
